
class Board:
    """ represents the board for a game of Connect Four.
    """

    def __init__(self, height, width):
        """ constructs a new Board object by initializing the three attributes
        """
        self.height = height
        self.width = width
        self.slots = [width * [' '] for n in range(height)]

    def __repr__(self):
        """ Returns a string representation for a Board object.
        """
        s = ''         # begin with an empty string

        # add one row of slots at a time
        for row in range(self.height):
            s += '|'   # one vertical bar at the start of the row

            for col in range(self.width):
                s += self.slots[row][col] + '|'

            s += '\n'  # newline at the end of the row

        # Add code here for the hyphens at the bottom of the board
        width = 2 * self.width + 1
        s += '-' * width + '\n'
        
        # and the numbers underneath it.
        a = ' 0 1 2 3 4 5 6 7 8 9'
        while width >= 20:
            s += a
            width -= 20
        s += a[:width]
        
        return s

    def add_checker(self, checker, col):
        """ adds a checker to the board
        """
        assert(checker == 'X' or checker == 'O')
        assert(0 <= col < self.width)

        # put the rest of the method here
        n = 0
        self.slots += [['1'] * self.width]
        while self.slots[n][col] == ' ':
            n += 1

        self.slots[n-1][col] = checker
        self.slots = self.slots[:-1]

    def reset(self):
        """ reset the Board object on which it is called by setting
            all slots to contain a space character
        """
        self = Board(self.height, self.width)

    def add_checkers(self, colnums):
        """ takes in a string of column numbers and places alternating
            checkers in those columns of the called Board object, 
            starting with 'X'.
        """
        checker = 'X'   # start by playing 'X'
    
        for col_str in colnums:
            col = int(col_str)
            if 0 <= col < self.width:
                self.add_checker(checker, col)
    
            # switch to the other checker
            if checker == 'X':
                checker = 'O'
            else:
                checker = 'X'
                

    def can_add_to(self,col):
        """ returns True if it is valid to place a checker in the column
            col on the calling Board object. Otherwise, it should return False
        """
        if col < 0:
            return False
        elif col > self.width - 1:
            return False
        elif self.slots[0][col] != ' ':
            return False
        return True

    def is_full(self):
        """ returns True if the called Board object is completely full of
            checkers, and returns False otherwise
        """
        for col in range(self.width):
            if self.can_add_to(col):
                return False
        return True

    def remove_checker(self, col):
        """ removes the top checker from column col of the called Board object
        """
        n = 0
        self.slots += [['1'] * self.width]
        while self.slots[n][col] == ' ':
            n += 1

        self.slots[n][col] = ' '
        self.slots = self.slots[:-1]

    def is_win_for(self, checker):
        """ accepts a parameter checker that is either 'X' or 'O', and returns
            True if there are four consecutive slots containing checker on the board
        """
        assert(checker == 'X' or checker == 'O')
        if self.is_horizontal_win(checker) or self.is_vertical_win(checker) \
           or self.is_diag_win(checker):
            return True
        else:
            return False        
        
        
    def is_horizontal_win(self, checker):
        """ Checks for a horizontal win for the specified checker.
        """
        for row in range(self.height):
            for col in range(self.width - 3):
                # Check if the next four columns in this row
                # contain the specified checker.
                if self.slots[row][col] == checker and \
                   self.slots[row][col + 1] == checker and \
                   self.slots[row][col + 2] == checker and \
                   self.slots[row][col + 3] == checker:
                    return True

        # if we make it here, there were no horizontal wins
        return False

    def is_vertical_win(self, checker):
        """ Checks for a Vertical win for the specified checker.
        """

        for row in range(self.height - 3):
            for col in range(self.width):
                if self.slots[row][col] == checker and \
                   self.slots[row + 1][col] == checker and \
                   self.slots[row + 2][col] == checker and \
                   self.slots[row + 3][col] == checker:
                    return True

        return False

    def is_diag_win(self, checker):
        """ Checks for a diagonal win for the specified checker
        """
        for row in range(self.height - 3):
            for col in range(self.width - 3):
                if self.slots[row][col] == checker and \
                   self.slots[row + 1][col + 1] == checker and \
                   self.slots[row + 2][col + 2] == checker and \
                   self.slots[row + 3][col + 3] == checker:
                    return True

        for row in range(self.height - 3):
            for col in range(3, self.width):
                if self.slots[row][col] == checker and \
                   self.slots[row + 1][col - 1] == checker and \
                   self.slots[row + 2][col - 2] == checker and \
                   self.slots[row + 3][col - 3] == checker:
                    return True

        return False
    
def t1():
    print(">>> b = Board(6, 7)")
    b = Board(6, 7)
    print(">>> b")
    print(b)
    print("")
    print("")
    print(">>> b2 = Board(5, 15)")
    b2 = Board(5, 15)
    print(">>> b2")
    print(b2)

def t3():
    print(">>> b1 = Board(6, 7)")
    b1 = Board(6, 7)
    print(">>> b1.add_checker('X', 0)")
    b1.add_checker('X', 0)
    print(">>> b1.add_checker('O', 0)")
    b1.add_checker('O', 0)
    print(">>> b1.add_checker('X', 0)")
    b1.add_checker('X', 0)
    print(">>> b1.add_checker('O', 3)")
    b1.add_checker('O', 3)
    print(">>> b1.add_checker('O', 4)    # cheat and let O go again!")
    b1.add_checker('O', 4)
    print(">>> b1.add_checker('O', 5)")
    b1.add_checker('O', 5)
    print(">>> b1.add_checker('O', 6)")
    b1.add_checker('O', 6)
    print(">>> b1")
    print(b1)

def t5():
    print(">>> b2 = Board(3, 3)")
    b2 = Board(3, 3)
    print(">>> b2.add_checkers('0200')")
    b2.add_checkers('0200')
    print(">>> b2")
    print(b2)

def t6():
    print(">>> b1 = Board(2, 2)")
    b1 = Board(2, 2)
    print(">>> b1")
    print(b1)
    print("")
    print(">>> b1.add_checker('X', 0)")
    b1.add_checker('X', 0)
    print(">>> b1.add_checker('O', 0)")
    b1.add_checker('O', 0)
    print(">>> b1")
    print(b1)
    print("")
    print(">>> b1.can_add_to(-1)")
    print(b1.can_add_to(-1))
    print(">>> b1.can_add_to(0)")
    print(b1.can_add_to(0))
    print(">>> b1.can_add_to(1)")
    print(b1.can_add_to(1))
    print(">>> b1.can_add_to(2)")
    print(b1.can_add_to(2))

def t7():
    print()
    b2 = Board(2, 2)
    print()
    print(b2.is_full())
    print()
    b2.add_checkers('0011')
    print()
    print(b2)
    print()
    print()
    print(b2.is_full())

def t8():
    print()
    b3 = Board(2, 2)
    print()
    b3.add_checkers('0011')
    print()
    b3.remove_checker(1)
    print()
    b3.remove_checker(1)
    print()
    b3.remove_checker(1)
    print()
    b3.remove_checker(0)
    print()
    print(b3)

def t9():
    print(">>> b = Board(6, 7)")
    b = Board(6, 7)
    print(">>> b.add_checkers('00102030')")
    b.add_checkers('00102030')
    print(">>> b")
    print(b)
    print("")
    print(">>> b.is_win_for('X')")
    print(b.is_win_for('X'))
    print(">>> b.is_win_for('O')")
    print(b.is_win_for('O'))
    print(">>> b2 = Board(6, 7)")
    b2 = Board(6, 7)
    print(">>> b2.add_checkers('23344545515')")
    b2.add_checkers('23344545515')
    print(">>> b2")
    print(b2)
    print("")
    print(">>> b2.is_win_for('X')   # up diagonal win")
    print(b2.is_win_for('X'))
    print(">>> b2.is_win_for('O')")
    print(b2.is_win_for('O'))

